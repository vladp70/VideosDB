OOP - VideosDB
Vlad Petrovici - 321CD
---------------------------------------------------------------------------------


The input data is parsed from json data and it is used to build the database of
users, actors, movies and tv shows. When initializing the actual data in the
database, as the entities reference other entities, there cannot be a sequential
independent process for them. The solution implemented was to create the actor
list without initially attributing the correct references to their filmography
because the films are not yet created. Ultimately, the filmography is stored
accordingly in the last part of the initialization process.

The database contains references to the objects so there is a smoother and more
direct transition between working with different entities, thus avoiding always
returning to the database to make the connection. It can find entities based on
their names and it can apply different actions on its lists. The ratings are
stored as an average value or a list of reviews and a number of reviews. In this
way, the overall rating can be easily calculated and updated given a new review
(e.g. through the overall sum of the grades and their number). The views and
number of favorite lists the films appear on are stored internally in the video
class for simplicity.

The recommendations, commands and queries are read from the parsed json
information, the requests being passed to the database to handle through its
methods. As the actions require interaction between different entities, the
database should be the class that operates with them and updates all the
involved parties with the new data. For the video queries, the implementations
were combined in one by passing as a parameter if the object worked on is a
movie or a serial. For queries, the data is filtered and then sorted as a new
list to preserve the initial order of the database.

The result is written in the output file.